/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package struts.actions;

import hibernate.accounting.payment.PaymentDaoInterface;
import hibernate.config.ICryptoPokerDAOManager;
import hibernate.user.UserDAOInterface;
import tools.AMSErrorHandler;
import tools.AMSException;
import tools.AMSUtililies;

import java.io.IOException;
import java.sql.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;

import common.MessageENT;
import common.PopupENT;
import common.accounting.payment.PaymentENT;
import common.accounting.payment.PaymentLST;

/**
 * MyEclipse Struts Creation date: 09-21-2010
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="reqCode" validate="true"
 * @struts.action-forward name="list" path="/jsp/farsi/news/newsList.jsp"
 */
public class PaymentAction extends Action {
	private static String success = "";
	private static String error = "";
	private String reqCode = "";

	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		ActionForward af = null;
		success = "";
		error = "";
		reqCode = request.getParameter("reqCode");
		if (reqCode == null) {
			reqCode = "paymentManagement";
		}
		System.out.println(reqCode);
		if (reqCode.equalsIgnoreCase("paymentManagement") || reqCode.equals("gridJson")) {
			return paymentManagement(request, mapping);
		} else if (reqCode.equals("paymentEdit") || reqCode.equals("paymentView") || reqCode.equals("paymentNew")
				|| reqCode.equals("paymentView")) {
			return editPayment(request, mapping, form);
		} else if (reqCode.equals("paymentSaveUpdate")) {
			return saveUpdatePayment(request, mapping);

		}
		return mapping.findForward(reqCode);
	}

	private ActionForward paymentManagement(HttpServletRequest request, ActionMapping mapping) {
		createMenusForPayments(request);
		PaymentLST paymentLST = getPaymentLST(request);
		request.setAttribute("paymentLST", paymentLST);// we call it a bean named paymentLST
		ObjectMapper mapper = new ObjectMapper();
		String json = "";
		try {
			json = mapper.writeValueAsString(paymentLST.getPaymentENTs());
		} catch (JsonGenerationException e) {
			e.printStackTrace();
		} catch (JsonMappingException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		json = AMSUtililies.prepareTheJSONStringForDataTable(paymentLST.getCurrentPage(), paymentLST.getTotalItems(),
				json, "paymentId", success, error);
		request.setAttribute("json", json);
		MessageENT m = new MessageENT(success, error);
		request.setAttribute("message", m);
		if (request.getParameter("reqCodeGrid") != null && request.getParameter("reqCodeGrid").equals("gridJson"))
			return mapping.findForward("gridJson");
		MessageENT mm = new MessageENT(success, error);
		request.setAttribute("message", mm);
		return mapping.findForward("paymentManagement");
	}

	//
	private ActionForward editPayment(HttpServletRequest request, ActionMapping mapping, ActionForm form) {
		PaymentENT paymentENT = new PaymentENT();
		long paymentId;
		System.out.println("here");
		if (request.getParameter("paymentId") != null) {
			paymentId = Long.parseLong(request.getParameter("paymentId"));
		} else {
			request.setAttribute("paymentENT", paymentENT);
			return mapping.findForward("paymentEdit");
		}
		paymentENT.setPaymentId(paymentId);
		// saveTheForm();
		try {
			request.setAttribute("paymentENT", getPaymentDAO().getPaymentENT(paymentENT));
		} catch (AMSException e) {
			error = e.getMessage();
			e.printStackTrace();
		}
		MessageENT m = new MessageENT(success, error);
		request.setAttribute("message", m);

		return mapping.findForward("paymentEdit");

	}

	//
	private void createMenusForPayments(HttpServletRequest request) {
		List<PopupENT> popupEnts = new ArrayList<PopupENT>();
		popupEnts.add(new PopupENT("hide-filters", "displaySearch();", "Show/Hide Search", "#"));
		popupEnts
				.add(new PopupENT("new-item", "callAnAction(\"payment.do?reqCode=paymentEdit\");", "New Payment", "#"));
		popupEnts.add(new PopupENT("delete-item", "deleteSelectedItems(\"deletePayment\");", "Delete Selected", "#"));
		// popupEnts
		// .add(new PopupENT("edit-item",
		// "callAnAction(\"payment.do?reqCode=paymentEdit\");",
		// "Edit Payment", "#"));

		List<PopupENT> popupGridEnts = new ArrayList<PopupENT>();
		popupGridEnts.add(new PopupENT("hide-filters",
				"callAnAction(\"payment.do?reqCode=paymentView&paymentId=REPLACEME\");", "View Payment", "#"));
		popupGridEnts.add(new PopupENT("edit-item",
				"callAnAction(\"payment.do?reqCode=paymentEdit&paymentId=REPLACEME\");", "Edit Payment", "#"));

		popupGridEnts
				.add(new PopupENT("delete-item", "deleteAnItem(\"REPLACEME\", \"deletePayment\");", "Remove", "#"));

		request.setAttribute("settingMenuItem", popupEnts);
		request.setAttribute("gridMenuItem", popupGridEnts);
	}

	//
	private ActionForward saveUpdatePayment(HttpServletRequest request, ActionMapping mapping) {
		// try {
		// request.setAttribute("clientENTs", getClientDAO()
		// .getClientsDropDown());
		// } catch (AMSException e1) {
		// // TODO Auto-generated catch block
		// e1.printStackTrace();
		// }
		PaymentENT userENT = getPaymentENT(request);
		try {
			userENT = getPaymentDAO().savePayment(userENT);
			success = "The user '" + userENT.getCreatorUsername() + "' saved successfully";
		} catch (AMSException e) {
			error = AMSErrorHandler.handle(request, this, e, "", "");
		}
		request.setAttribute("paymentENT", userENT);
		MessageENT m = new MessageENT(success, error);
		request.setAttribute("message", m);
		return mapping.findForward("paymentEdit");
	}

	//
	// private void deleteUser(HttpServletRequest request) {
	// String[] delID = request.getParameter("deleteID").split(",");
	// ArrayList<UserENT> usersToDelete = new ArrayList<UserENT>();
	// for (int i = 0; i < delID.length; i++) {
	// UserENT user = new UserENT();
	// usersToDelete.add(user);
	// try {
	// getUserDAO().deleteUsers(usersToDelete);
	// success = "The user(s) removed successfully";
	// } catch (AMSException e) {
	// e.printStackTrace();
	// error = AMSErrorHandler.handle(request, this, e, "", "");
	// }
	// }
	// MessageENT m = new MessageENT(success, error);
	// request.setAttribute("message", m);
	// }
	//
	private PaymentENT getPaymentENT(HttpServletRequest request) {
		// date format for registration date
		DateFormat df = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
		PaymentENT paymentENT = new PaymentENT();
		if (request.getParameter("paymentId") != null)
			paymentENT.setPaymentId(Long.parseLong(request.getParameter("paymentId")));
		else {

		}
		if (paymentENT.getDateTime() == null)
			paymentENT.setDateTime(Date.valueOf(df.format(Calendar.getInstance().getTime())));
		paymentENT.setUsername(request.getParameter("userName"));
		paymentENT.setCreatorUsername(request.getParameter("creatorUsername"));
		paymentENT.setBankResponse(request.getParameter("bankResponse"));
		paymentENT.setStatus(Integer.parseInt(request.getParameter("status")));
		paymentENT.setAmount(Double.parseDouble(request.getParameter("amount")));
		paymentENT.setCurrency(request.getParameter("currency"));
		paymentENT.setReason(request.getParameter("reason"));

		return paymentENT;
	}

	//
	private PaymentLST getPaymentLST(HttpServletRequest request) {
		String search = request.getParameter("searchUser.userName");
		if (search == null)
			search = "";
		PaymentENT paymentENT = new PaymentENT();
		int pageNo = 1;
		int pageSize = 10;
		if (request.getParameter("currentPage") != null)
			pageNo = Integer.parseInt(request.getParameter("currentPage"));
		if (request.getParameter("pageSize") != null)
			pageSize = Integer.parseInt(request.getParameter("pageSize"));
		paymentENT.setUsername(search);
		PaymentLST paymentLST = new PaymentLST();
		paymentLST.setPageSize(pageSize);
		paymentLST.setSearchPayment(paymentENT);
		paymentLST.setCurrentPage(pageNo);
		try {
			paymentLST = getPaymentDAO().getPaymentLST(paymentLST);
		} catch (AMSException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return paymentLST;
	}

	//
	private static PaymentDaoInterface getPaymentDAO() {
		return ICryptoPokerDAOManager.getPaymentDAOInterface();
	}
}