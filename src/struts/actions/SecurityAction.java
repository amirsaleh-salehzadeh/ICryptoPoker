/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package struts.actions;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import hibernate.config.ICryptoPokerDAOManager;
import hibernate.security.SecurityDAOInterface;
import hibernate.user.UserDAOInterface;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;
import org.codehaus.jackson.annotate.JsonMethod;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;

import com.google.gson.Gson;

import tools.AMSErrorHandler;
import tools.AMSException;
import tools.AMSUtililies;
import tools.NVL;
import common.MessageENT;
import common.PopupENT;
import common.security.RoleENT;
import common.security.RoleLST;

/**
 * MyEclipse Struts Creation date: 09-21-2010
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="reqCode" validate="true"
 * @struts.action-forward name="list" path="/jsp/farsi/news/newsList.jsp"
 */
public class SecurityAction extends Action {
	private static String success = "";
	private static String error = "";
	private String reqCode = "";

	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		ActionForward af = null;
		success = "";
		error = "";
		reqCode = request.getParameter("reqCode");
		if (reqCode == null)
			reqCode = "roleManagement";
		if (reqCode.equalsIgnoreCase("deleteRole")) {
			deleteRole(request);
			reqCode = "roleManagement";
		}
		if (reqCode.equalsIgnoreCase("roleManagement")) {
			return roleManagement(request, mapping);
		} else if (reqCode.equals("roleEdit")) {
			return editRole(request, mapping, form);
		} else if (reqCode.equals("saveUpdateRole")) {
			return saveUpdateRole(request, mapping, form);
		}
		return af;
	}

	private ActionForward saveUpdateRole(HttpServletRequest request,
			ActionMapping mapping, ActionForm form) {
		RoleENT roleENT = (RoleENT) form;
		try {
			roleENT = getSecurityDAO().saveUpdateRole(roleENT, null);
			success = "The role '" + roleENT.getRoleName()
					+ "' saved successfully";
		} catch (AMSException e) {
			error = AMSErrorHandler.handle(request, this, e, "", "");
		}
		request.setAttribute("roleENT", roleENT);
		MessageENT m = new MessageENT(success, error);
		request.setAttribute("message", m);
		return mapping.findForward("roleEdit");
	}

	private ActionForward editRole(HttpServletRequest request,
			ActionMapping mapping, ActionForm form) {
		RoleENT roleENT = (RoleENT) form;
		if (request.getParameter("roleName") == null) {
			request.setAttribute("roleENT", roleENT);
			return mapping.findForward("roleEdit");
		}
		roleENT.setRoleName(request.getParameter("roleName"));
		try {
			request.setAttribute("roleENT", getSecurityDAO().getRole(roleENT));
		} catch (AMSException e) {
			error = e.getMessage();
			e.printStackTrace();
		}
		MessageENT m = new MessageENT(success, error);
		request.setAttribute("message", m);
		return mapping.findForward("roleEdit");
	}

	private void deleteRole(HttpServletRequest request) {
		String[] delId = request.getParameter("deleteID").split(",");
		ArrayList<RoleENT> rolesToDelete = new ArrayList<RoleENT>();
		for (int i = 0; i < delId.length; i++) {
			RoleENT role = new RoleENT(delId[i]);
			rolesToDelete.add(role);
		}
		try {
			getSecurityDAO().deleteRoles(rolesToDelete);
			success = "The role(s) removed successfully";
		} catch (AMSException e) {
			e.printStackTrace();
			error = AMSErrorHandler.handle(request, this, e, "", "");
		}
	}

	private ActionForward roleManagement(HttpServletRequest request,
			ActionMapping mapping) {
		createMenusForRole(request);
		RoleLST roleLST = getRoleLST(request);
		request.setAttribute("roleLST", roleLST);
		String json = "";
		Gson g = new Gson();
		String j = g.toJson(roleLST.getRoleENTs());
		json = AMSUtililies.prepareTheJSONStringForDataTable(
				roleLST.getCurrentPage(), roleLST.getTotalItems(), j,
				"roleName", success, error);
		request.setAttribute("json", json);
		if (request.getParameter("reqCodeGrid") != null
				&& request.getParameter("reqCodeGrid").equals("gridJson"))
			return mapping.findForward("gridJson");
		MessageENT m = new MessageENT(success, error);
		request.setAttribute("message", m);
		return mapping.findForward("roleManagement");
	}

	private void createMenusForRole(HttpServletRequest request) {
		List<PopupENT> popupEnts = new ArrayList<PopupENT>();
		popupEnts.add(new PopupENT("hide-filters", "displaySearch();",
				"Show/Hide Search", "#"));
		popupEnts.add(new PopupENT("new-item",
				"callAnAction(\"security.do?reqCode=roleEdit\");", "New Role",
				"#"));
		popupEnts
				.add(new PopupENT("delete-item",
						"deleteSelectedItems(\"deleteRole\");",
						"Delete Selected", "#"));
		List<PopupENT> popupGridEnts = new ArrayList<PopupENT>();

		// popupGridEnts
		// .add(new PopupENT(
		// "edit-item",
		// "callAnAction(\"security.do?reqCode=roleEdit&roleName=REPLACEME\");",
		// "Edit Role", "#"));
		popupGridEnts.add(new PopupENT("delete-item",
				"deleteAnItem(\"REPLACEME\", \"deleteRole\");", "Remove", "#")); //
		request.setAttribute("settingMenuItem", popupEnts);
		request.setAttribute("gridMenuItem", popupGridEnts);
	}

	private void createMenusForGroup(HttpServletRequest request) {
		List<PopupENT> popupEnts = new ArrayList<PopupENT>();
		popupEnts.add(new PopupENT("hide-filters", "displaySearch();",
				"Show/Hide Search", "#"));
		popupEnts.add(new PopupENT("new-item",
				"callAnAction(\"security.do?reqCode=groupEdit\");",
				"New Group", "#"));
		popupEnts
				.add(new PopupENT("delete-item",
						"deleteSelectedItems(\"deleteGroup\");",
						"Delete Selected", "#"));
		
		
		List<PopupENT> popupGridEnts = new ArrayList<PopupENT>();

		popupGridEnts
				.add(new PopupENT(
						"edit-item",
						"callAnAction(\"security.do?reqCode=roleEdit&roleName=REPLACEME\");",
						"Edit Role", "#"));
		popupGridEnts.add(new PopupENT("delete-item",
				"deleteAnItem(\"REPLACEME\", \"deleteRole\");", "Remove", "#")); //
		request.setAttribute("settingMenuItem", popupEnts);
		request.setAttribute("gridMenuItem", popupGridEnts);
	}

	private RoleLST getRoleLST(HttpServletRequest request) {
		String search = request.getParameter("searchRole.roleName");
		if (search == null)
			search = "";
		int pageNo = 1;
		int pageSize = 10;
		if (request.getParameter("currentPage") != null)
			pageNo = Integer.parseInt(request.getParameter("currentPage"));
		if (request.getParameter("pageSize") != null)
			pageSize = Integer.parseInt(request.getParameter("pageSize"));
		RoleENT roleENT = new RoleENT(search, "", search);
		RoleLST roleLST = new RoleLST(roleENT, pageNo, pageSize, true,
				"category_role");
		try {
			roleLST = getSecurityDAO().getRolesList(roleLST);
		} catch (AMSException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return roleLST;
	}

	// /////calls a DAO containg methods for the security management
	private static SecurityDAOInterface getSecurityDAO() {
		return ICryptoPokerDAOManager.getSecuirtyDAOInterface();
	}

	private static UserDAOInterface getUserDAO() {
		return ICryptoPokerDAOManager.getUserDAOInterface();
	}
}